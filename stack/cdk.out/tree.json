{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "Tree": {
        "id": "Tree",
        "path": "Tree"
      },
      "ml-base-infra-stack": {
        "id": "ml-base-infra-stack",
        "path": "ml-base-infra-stack",
        "children": {
          "Vpc": {
            "id": "Vpc",
            "path": "ml-base-infra-stack/Vpc",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ml-base-infra-stack/Vpc/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::VPC",
                  "aws:cdk:cloudformation:props": {
                    "cidrBlock": "10.0.0.0/16",
                    "enableDnsHostnames": true,
                    "enableDnsSupport": true,
                    "instanceTenancy": "default",
                    "tags": [
                      {
                        "key": "Name",
                        "value": "ml-base-infra-stack/Vpc"
                      }
                    ]
                  }
                }
              },
              "ingressSubnet1": {
                "id": "ingressSubnet1",
                "path": "ml-base-infra-stack/Vpc/ingressSubnet1",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet1/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "10.0.0.0/24",
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": true,
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/ingressSubnet1"
                          },
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "ingress"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Public"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet1/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet1/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/ingressSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet1/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcingressSubnet1RouteTable804C7A26"
                        },
                        "subnetId": {
                          "Ref": "VpcingressSubnet1Subnet059F22C6"
                        }
                      }
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet1/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcingressSubnet1RouteTable804C7A26"
                        },
                        "destinationCidrBlock": "0.0.0.0/0",
                        "gatewayId": {
                          "Ref": "VpcIGWD7BA715C"
                        }
                      }
                    }
                  },
                  "EIP": {
                    "id": "EIP",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet1/EIP",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::EIP",
                      "aws:cdk:cloudformation:props": {
                        "domain": "vpc",
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/ingressSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "NATGateway": {
                    "id": "NATGateway",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet1/NATGateway",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::NatGateway",
                      "aws:cdk:cloudformation:props": {
                        "allocationId": {
                          "Fn::GetAtt": [
                            "VpcingressSubnet1EIPD1FA297B",
                            "AllocationId"
                          ]
                        },
                        "subnetId": {
                          "Ref": "VpcingressSubnet1Subnet059F22C6"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/ingressSubnet1"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "ingressSubnet2": {
                "id": "ingressSubnet2",
                "path": "ml-base-infra-stack/Vpc/ingressSubnet2",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet2/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "10.0.1.0/24",
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            1,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": true,
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/ingressSubnet2"
                          },
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "ingress"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Public"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet2/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet2/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/ingressSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet2/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcingressSubnet2RouteTable8B0E23A7"
                        },
                        "subnetId": {
                          "Ref": "VpcingressSubnet2SubnetF175D754"
                        }
                      }
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet2/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcingressSubnet2RouteTable8B0E23A7"
                        },
                        "destinationCidrBlock": "0.0.0.0/0",
                        "gatewayId": {
                          "Ref": "VpcIGWD7BA715C"
                        }
                      }
                    }
                  },
                  "EIP": {
                    "id": "EIP",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet2/EIP",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::EIP",
                      "aws:cdk:cloudformation:props": {
                        "domain": "vpc",
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/ingressSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "NATGateway": {
                    "id": "NATGateway",
                    "path": "ml-base-infra-stack/Vpc/ingressSubnet2/NATGateway",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::NatGateway",
                      "aws:cdk:cloudformation:props": {
                        "allocationId": {
                          "Fn::GetAtt": [
                            "VpcingressSubnet2EIP87470ECB",
                            "AllocationId"
                          ]
                        },
                        "subnetId": {
                          "Ref": "VpcingressSubnet2SubnetF175D754"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/ingressSubnet2"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "applicationSubnet1": {
                "id": "applicationSubnet1",
                "path": "ml-base-infra-stack/Vpc/applicationSubnet1",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet1/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "10.0.2.0/24",
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/applicationSubnet1"
                          },
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "application"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Private"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet1/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet1/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/applicationSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet1/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcapplicationSubnet1RouteTableF03E8296"
                        },
                        "subnetId": {
                          "Ref": "VpcapplicationSubnet1Subnet8B68205B"
                        }
                      }
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet1/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcapplicationSubnet1RouteTableF03E8296"
                        },
                        "destinationCidrBlock": "0.0.0.0/0",
                        "natGatewayId": {
                          "Ref": "VpcingressSubnet1NATGateway5ADD866D"
                        }
                      }
                    }
                  }
                }
              },
              "applicationSubnet2": {
                "id": "applicationSubnet2",
                "path": "ml-base-infra-stack/Vpc/applicationSubnet2",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet2/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "10.0.3.0/24",
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            1,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/applicationSubnet2"
                          },
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "application"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Private"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet2/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet2/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/applicationSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet2/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcapplicationSubnet2RouteTable17378AED"
                        },
                        "subnetId": {
                          "Ref": "VpcapplicationSubnet2Subnet29670962"
                        }
                      }
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "ml-base-infra-stack/Vpc/applicationSubnet2/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcapplicationSubnet2RouteTable17378AED"
                        },
                        "destinationCidrBlock": "0.0.0.0/0",
                        "natGatewayId": {
                          "Ref": "VpcingressSubnet2NATGatewayDAA0F549"
                        }
                      }
                    }
                  }
                }
              },
              "rdsSubnet1": {
                "id": "rdsSubnet1",
                "path": "ml-base-infra-stack/Vpc/rdsSubnet1",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ml-base-infra-stack/Vpc/rdsSubnet1/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "10.0.4.0/28",
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/rdsSubnet1"
                          },
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "rds"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Isolated"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ml-base-infra-stack/Vpc/rdsSubnet1/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ml-base-infra-stack/Vpc/rdsSubnet1/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/rdsSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ml-base-infra-stack/Vpc/rdsSubnet1/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcrdsSubnet1RouteTableE62E4ED6"
                        },
                        "subnetId": {
                          "Ref": "VpcrdsSubnet1SubnetC2926CEA"
                        }
                      }
                    }
                  }
                }
              },
              "rdsSubnet2": {
                "id": "rdsSubnet2",
                "path": "ml-base-infra-stack/Vpc/rdsSubnet2",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "ml-base-infra-stack/Vpc/rdsSubnet2/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "10.0.4.16/28",
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            1,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/rdsSubnet2"
                          },
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "rds"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Isolated"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "ml-base-infra-stack/Vpc/rdsSubnet2/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "ml-base-infra-stack/Vpc/rdsSubnet2/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "Vpc8378EB38"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ml-base-infra-stack/Vpc/rdsSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "ml-base-infra-stack/Vpc/rdsSubnet2/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "VpcrdsSubnet2RouteTable3E531D9B"
                        },
                        "subnetId": {
                          "Ref": "VpcrdsSubnet2Subnet70A835C8"
                        }
                      }
                    }
                  }
                }
              },
              "IGW": {
                "id": "IGW",
                "path": "ml-base-infra-stack/Vpc/IGW",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::InternetGateway",
                  "aws:cdk:cloudformation:props": {
                    "tags": [
                      {
                        "key": "Name",
                        "value": "ml-base-infra-stack/Vpc"
                      }
                    ]
                  }
                }
              },
              "VPCGW": {
                "id": "VPCGW",
                "path": "ml-base-infra-stack/Vpc/VPCGW",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::VPCGatewayAttachment",
                  "aws:cdk:cloudformation:props": {
                    "vpcId": {
                      "Ref": "Vpc8378EB38"
                    },
                    "internetGatewayId": {
                      "Ref": "VpcIGWD7BA715C"
                    }
                  }
                }
              }
            }
          },
          "applicationSecurityGroup": {
            "id": "applicationSecurityGroup",
            "path": "ml-base-infra-stack/applicationSecurityGroup",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ml-base-infra-stack/applicationSecurityGroup/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                  "aws:cdk:cloudformation:props": {
                    "groupDescription": "ml-base-infra-stack/applicationSecurityGroup",
                    "groupName": "applicationSecurityGroup",
                    "securityGroupEgress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "description": "Allow all outbound traffic by default",
                        "ipProtocol": "-1"
                      }
                    ],
                    "vpcId": {
                      "Ref": "Vpc8378EB38"
                    }
                  }
                }
              }
            }
          },
          "rdsSecurityGroup": {
            "id": "rdsSecurityGroup",
            "path": "ml-base-infra-stack/rdsSecurityGroup",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ml-base-infra-stack/rdsSecurityGroup/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                  "aws:cdk:cloudformation:props": {
                    "groupDescription": "ml-base-infra-stack/rdsSecurityGroup",
                    "groupName": "rdsSecurityGroup",
                    "securityGroupEgress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "description": "Allow all outbound traffic by default",
                        "ipProtocol": "-1"
                      }
                    ],
                    "vpcId": {
                      "Ref": "Vpc8378EB38"
                    }
                  }
                }
              }
            }
          },
          "modeldb-rds-sg": {
            "id": "modeldb-rds-sg",
            "path": "ml-base-infra-stack/modeldb-rds-sg"
          },
          "modeldb-application-sg": {
            "id": "modeldb-application-sg",
            "path": "ml-base-infra-stack/modeldb-application-sg"
          },
          "Exports": {
            "id": "Exports",
            "path": "ml-base-infra-stack/Exports",
            "children": {
              "Output{\"Ref\":\"Vpc8378EB38\"}": {
                "id": "Output{\"Ref\":\"Vpc8378EB38\"}",
                "path": "ml-base-infra-stack/Exports/Output{\"Ref\":\"Vpc8378EB38\"}"
              },
              "Output{\"Ref\":\"VpcingressSubnet1Subnet059F22C6\"}": {
                "id": "Output{\"Ref\":\"VpcingressSubnet1Subnet059F22C6\"}",
                "path": "ml-base-infra-stack/Exports/Output{\"Ref\":\"VpcingressSubnet1Subnet059F22C6\"}"
              },
              "Output{\"Ref\":\"VpcingressSubnet2SubnetF175D754\"}": {
                "id": "Output{\"Ref\":\"VpcingressSubnet2SubnetF175D754\"}",
                "path": "ml-base-infra-stack/Exports/Output{\"Ref\":\"VpcingressSubnet2SubnetF175D754\"}"
              },
              "Output{\"Ref\":\"VpcapplicationSubnet1Subnet8B68205B\"}": {
                "id": "Output{\"Ref\":\"VpcapplicationSubnet1Subnet8B68205B\"}",
                "path": "ml-base-infra-stack/Exports/Output{\"Ref\":\"VpcapplicationSubnet1Subnet8B68205B\"}"
              },
              "Output{\"Ref\":\"VpcapplicationSubnet2Subnet29670962\"}": {
                "id": "Output{\"Ref\":\"VpcapplicationSubnet2Subnet29670962\"}",
                "path": "ml-base-infra-stack/Exports/Output{\"Ref\":\"VpcapplicationSubnet2Subnet29670962\"}"
              },
              "Output{\"Ref\":\"VpcrdsSubnet1SubnetC2926CEA\"}": {
                "id": "Output{\"Ref\":\"VpcrdsSubnet1SubnetC2926CEA\"}",
                "path": "ml-base-infra-stack/Exports/Output{\"Ref\":\"VpcrdsSubnet1SubnetC2926CEA\"}"
              },
              "Output{\"Ref\":\"VpcrdsSubnet2Subnet70A835C8\"}": {
                "id": "Output{\"Ref\":\"VpcrdsSubnet2Subnet70A835C8\"}",
                "path": "ml-base-infra-stack/Exports/Output{\"Ref\":\"VpcrdsSubnet2Subnet70A835C8\"}"
              }
            }
          }
        }
      },
      "modeldb-rds-stack": {
        "id": "modeldb-rds-stack",
        "path": "modeldb-rds-stack",
        "children": {
          "ec2-SecurityGroup": {
            "id": "ec2-SecurityGroup",
            "path": "modeldb-rds-stack/ec2-SecurityGroup"
          },
          "RDSIngressRule": {
            "id": "RDSIngressRule",
            "path": "modeldb-rds-stack/RDSIngressRule",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
              "aws:cdk:cloudformation:props": {
                "ipProtocol": "tcp",
                "fromPort": 5432,
                "groupId": {
                  "Fn::ImportValue": "modeldb-rds-sg"
                },
                "sourceSecurityGroupId": {
                  "Fn::ImportValue": "modeldb-application-sg"
                },
                "toPort": 5432
              }
            }
          },
          "modeldb-rds-credentials": {
            "id": "modeldb-rds-credentials",
            "path": "modeldb-rds-stack/modeldb-rds-credentials"
          },
          "ModelDBRDSInstance": {
            "id": "ModelDBRDSInstance",
            "path": "modeldb-rds-stack/ModelDBRDSInstance",
            "children": {
              "SubnetGroup": {
                "id": "SubnetGroup",
                "path": "modeldb-rds-stack/ModelDBRDSInstance/SubnetGroup",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::RDS::DBSubnetGroup",
                  "aws:cdk:cloudformation:props": {
                    "dbSubnetGroupDescription": "Subnet group for ModelDBRDSInstance database",
                    "subnetIds": [
                      {
                        "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcrdsSubnet1SubnetC2926CEA415B78A7"
                      },
                      {
                        "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcrdsSubnet2Subnet70A835C80F5EB08B"
                      }
                    ]
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "modeldb-rds-stack/ModelDBRDSInstance/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::RDS::DBInstance",
                  "aws:cdk:cloudformation:props": {
                    "dbInstanceClass": "db.t2.small",
                    "allocatedStorage": "25",
                    "autoMinorVersionUpgrade": false,
                    "backupRetentionPeriod": 1,
                    "copyTagsToSnapshot": true,
                    "dbName": "postgres",
                    "dbSubnetGroupName": {
                      "Ref": "ModelDBRDSInstanceSubnetGroup2E015E21"
                    },
                    "deletionProtection": false,
                    "engine": "postgres",
                    "masterUsername": "postgres",
                    "masterUserPassword": {
                      "Fn::Join": [
                        "",
                        [
                          "{{resolve:secretsmanager:arn:aws:secretsmanager:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":secret:modeldb-rds-password-SnYFyD:SecretString:::}}"
                        ]
                      ]
                    },
                    "multiAz": false,
                    "port": "5432",
                    "publiclyAccessible": false,
                    "storageEncrypted": true,
                    "storageType": "gp2",
                    "vpcSecurityGroups": [
                      {
                        "Fn::ImportValue": "modeldb-rds-sg"
                      }
                    ]
                  }
                }
              }
            }
          },
          "modeldb-rds-url": {
            "id": "modeldb-rds-url",
            "path": "modeldb-rds-stack/modeldb-rds-url"
          }
        }
      },
      "modeldb-ecs-cluster-stack": {
        "id": "modeldb-ecs-cluster-stack",
        "path": "modeldb-ecs-cluster-stack",
        "children": {
          "ec2-SecurityGroup": {
            "id": "ec2-SecurityGroup",
            "path": "modeldb-ecs-cluster-stack/ec2-SecurityGroup",
            "children": {
              "from 0.0.0.0_0:22": {
                "id": "from 0.0.0.0_0:22",
                "path": "modeldb-ecs-cluster-stack/ec2-SecurityGroup/from 0.0.0.0_0:22",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                  "aws:cdk:cloudformation:props": {
                    "ipProtocol": "tcp",
                    "cidrIp": "0.0.0.0/0",
                    "description": "from 0.0.0.0/0:22",
                    "fromPort": 22,
                    "groupId": {
                      "Fn::ImportValue": "modeldb-application-sg"
                    },
                    "toPort": 22
                  }
                }
              },
              "from 0.0.0.0_0:8085": {
                "id": "from 0.0.0.0_0:8085",
                "path": "modeldb-ecs-cluster-stack/ec2-SecurityGroup/from 0.0.0.0_0:8085",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                  "aws:cdk:cloudformation:props": {
                    "ipProtocol": "tcp",
                    "cidrIp": "0.0.0.0/0",
                    "description": "from 0.0.0.0/0:8085",
                    "fromPort": 8085,
                    "groupId": {
                      "Fn::ImportValue": "modeldb-application-sg"
                    },
                    "toPort": 8085
                  }
                }
              },
              "from 0.0.0.0_0:8086": {
                "id": "from 0.0.0.0_0:8086",
                "path": "modeldb-ecs-cluster-stack/ec2-SecurityGroup/from 0.0.0.0_0:8086",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                  "aws:cdk:cloudformation:props": {
                    "ipProtocol": "tcp",
                    "cidrIp": "0.0.0.0/0",
                    "description": "from 0.0.0.0/0:8086",
                    "fromPort": 8086,
                    "groupId": {
                      "Fn::ImportValue": "modeldb-application-sg"
                    },
                    "toPort": 8086
                  }
                }
              },
              "from 0.0.0.0_0:8080": {
                "id": "from 0.0.0.0_0:8080",
                "path": "modeldb-ecs-cluster-stack/ec2-SecurityGroup/from 0.0.0.0_0:8080",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                  "aws:cdk:cloudformation:props": {
                    "ipProtocol": "tcp",
                    "cidrIp": "0.0.0.0/0",
                    "description": "from 0.0.0.0/0:8080",
                    "fromPort": 8080,
                    "groupId": {
                      "Fn::ImportValue": "modeldb-application-sg"
                    },
                    "toPort": 8080
                  }
                }
              }
            }
          },
          "modeldb-namespace": {
            "id": "modeldb-namespace",
            "path": "modeldb-ecs-cluster-stack/modeldb-namespace",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "modeldb-ecs-cluster-stack/modeldb-namespace/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
                  "aws:cdk:cloudformation:props": {
                    "name": "modeldb-cluster-aws.com",
                    "vpc": {
                      "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpc8378EB38272D6E3A"
                    }
                  }
                }
              }
            }
          },
          "modeldb-ecs-cluster": {
            "id": "modeldb-ecs-cluster",
            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::Cluster",
                  "aws:cdk:cloudformation:props": {
                    "clusterName": "modeldb-ecs-cluster"
                  }
                }
              },
              "DefaultAutoScalingGroup": {
                "id": "DefaultAutoScalingGroup",
                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup",
                "children": {
                  "InstanceSecurityGroup": {
                    "id": "InstanceSecurityGroup",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                          "aws:cdk:cloudformation:props": {
                            "groupDescription": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
                            "securityGroupEgress": [
                              {
                                "cidrIp": "0.0.0.0/0",
                                "description": "Allow all outbound traffic by default",
                                "ipProtocol": "-1"
                              }
                            ],
                            "tags": [
                              {
                                "key": "Name",
                                "value": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup"
                              }
                            ],
                            "vpcId": {
                              "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpc8378EB38272D6E3A"
                            }
                          }
                        }
                      }
                    }
                  },
                  "InstanceRole": {
                    "id": "InstanceRole",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/InstanceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/InstanceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "ec2.",
                                          {
                                            "Ref": "AWS::URLSuffix"
                                          }
                                        ]
                                      ]
                                    }
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "tags": [
                              {
                                "key": "Name",
                                "value": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup"
                              }
                            ]
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "ecs:CreateCluster",
                                        "ecs:DeregisterContainerInstance",
                                        "ecs:DiscoverPollEndpoint",
                                        "ecs:Poll",
                                        "ecs:RegisterContainerInstance",
                                        "ecs:StartTelemetrySession",
                                        "ecs:Submit*",
                                        "ecr:GetAuthorizationToken",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": "*"
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "modeldbecsclusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy56A44B28",
                                "roles": [
                                  {
                                    "Ref": "modeldbecsclusterDefaultAutoScalingGroupInstanceRoleF55C5BA3"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "InstanceProfile": {
                    "id": "InstanceProfile",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/InstanceProfile",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::InstanceProfile",
                      "aws:cdk:cloudformation:props": {
                        "roles": [
                          {
                            "Ref": "modeldbecsclusterDefaultAutoScalingGroupInstanceRoleF55C5BA3"
                          }
                        ]
                      }
                    }
                  },
                  "LaunchConfig": {
                    "id": "LaunchConfig",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LaunchConfig",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AutoScaling::LaunchConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "imageId": {
                          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
                        },
                        "instanceType": "m4.xlarge",
                        "iamInstanceProfile": {
                          "Ref": "modeldbecsclusterDefaultAutoScalingGroupInstanceProfile7949990E"
                        },
                        "keyName": "datafy-keypair",
                        "securityGroups": [
                          {
                            "Fn::GetAtt": [
                              "modeldbecsclusterDefaultAutoScalingGroupInstanceSecurityGroupFF284E8D",
                              "GroupId"
                            ]
                          },
                          {
                            "Fn::ImportValue": "modeldb-application-sg"
                          }
                        ],
                        "userData": {
                          "Fn::Base64": {
                            "Fn::Join": [
                              "",
                              [
                                "#!/bin/bash\necho ECS_CLUSTER=",
                                {
                                  "Ref": "modeldbecscluster855068CD"
                                },
                                " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config\n\n#!/bin/bash\nmkdir -p /ecs/backend/config/\ncat <<< '\n#This config is used by docker compose.\n#ModelDB Properties\ngrpcServer:\n  port: 8085\n\nspringServer:\n  port: 8086\n  shutdownTimeout: 30 #time in second\n\nartifactStoreConfig:\n  artifactStoreType: NFS #S3, GCP, NFS\n  NFS:\n    nfsUrlProtocol: http\n    nfsRootPath: /artifact-store/\n    artifactEndpoint:\n      getArtifact: \"api/v1/artifact/getArtifact\"\n      storeArtifact: \"api/v1/artifact/storeArtifact\"\n\n# Database settings (type mongodb, couchbasedb, relational etc..)\ndatabase:\n  DBType: relational\n  timeout: 4\n  liquibaseLockThreshold: 60 #time in second\n  RdbConfiguration:\n    RdbDatabaseName: postgres\n    RdbDriver: \"org.postgresql.Driver\"\n    RdbDialect: \"org.hibernate.dialect.PostgreSQLDialect\"\n    RdbUrl: \"",
                                {
                                  "Fn::ImportValue": "modeldb-rds-url"
                                },
                                "\"\n    RdbUsername: \"postgres\"\n    RdbPassword: \"D)!on0:wi.$*Oz}yKFCiN&+z!>>5FO\"\n\n# Test Database settings (type mongodb, couchbasedb etc..)\ntest:\n  test-database:\n    DBType: relational\n    timeout: 4\n    liquibaseLockThreshold: 60 #time in second\n    RdbConfiguration:\n      RdbDatabaseName: postgres\n      RdbDriver: \"org.postgresql.Driver\"\n      RdbDialect: \"org.hibernate.dialect.PostgreSQLDialect\"\n      RdbUrl: \"jdbc:postgresql://modeldb-postgres:5432\"\n      RdbUsername: postgres\n      RdbPassword: root\n\n#ArtifactStore Properties\nartifactStore_grpcServer:\n  host: modeldb-backend\n  port: 8086\n\ntelemetry:\n  opt_in: true\n  frequency: 1 #frequency to share data in hours, default 1\n  consumer: https://app.verta.ai/api/v1/uac-proxy/telemetry/collectTelemetry' > /ecs/backend/config/config.yaml"
                              ]
                            ]
                          }
                        }
                      }
                    }
                  },
                  "ASG": {
                    "id": "ASG",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/ASG",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AutoScaling::AutoScalingGroup",
                      "aws:cdk:cloudformation:props": {
                        "maxSize": "1",
                        "minSize": "1",
                        "launchConfigurationName": {
                          "Ref": "modeldbecsclusterDefaultAutoScalingGroupLaunchConfigF4E6055D"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup",
                            "propagateAtLaunch": true
                          }
                        ],
                        "vpcZoneIdentifier": [
                          {
                            "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcingressSubnet1Subnet059F22C68B714600"
                          },
                          {
                            "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcingressSubnet2SubnetF175D754472AB14E"
                          }
                        ]
                      }
                    }
                  },
                  "DrainECSHook": {
                    "id": "DrainECSHook",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook",
                    "children": {
                      "Function": {
                        "id": "Function",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function",
                        "children": {
                          "ServiceRole": {
                            "id": "ServiceRole",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                                  "aws:cdk:cloudformation:props": {
                                    "assumeRolePolicyDocument": {
                                      "Statement": [
                                        {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": {
                                            "Service": "lambda.amazonaws.com"
                                          }
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "managedPolicyArns": [
                                      {
                                        "Fn::Join": [
                                          "",
                                          [
                                            "arn:",
                                            {
                                              "Ref": "AWS::Partition"
                                            },
                                            ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                                          ]
                                        ]
                                      }
                                    ],
                                    "tags": [
                                      {
                                        "key": "Name",
                                        "value": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup"
                                      }
                                    ]
                                  }
                                }
                              },
                              "DefaultPolicy": {
                                "id": "DefaultPolicy",
                                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy",
                                "children": {
                                  "Resource": {
                                    "id": "Resource",
                                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource",
                                    "attributes": {
                                      "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                      "aws:cdk:cloudformation:props": {
                                        "policyDocument": {
                                          "Statement": [
                                            {
                                              "Action": [
                                                "ec2:DescribeInstances",
                                                "ec2:DescribeInstanceAttribute",
                                                "ec2:DescribeInstanceStatus",
                                                "ec2:DescribeHosts"
                                              ],
                                              "Effect": "Allow",
                                              "Resource": "*"
                                            },
                                            {
                                              "Action": "autoscaling:CompleteLifecycleAction",
                                              "Effect": "Allow",
                                              "Resource": {
                                                "Fn::Join": [
                                                  "",
                                                  [
                                                    "arn:",
                                                    {
                                                      "Ref": "AWS::Partition"
                                                    },
                                                    ":autoscaling:",
                                                    {
                                                      "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                      "Ref": "AWS::AccountId"
                                                    },
                                                    ":autoScalingGroup:*:autoScalingGroupName/",
                                                    {
                                                      "Ref": "modeldbecsclusterDefaultAutoScalingGroupASG6849224B"
                                                    }
                                                  ]
                                                ]
                                              }
                                            },
                                            {
                                              "Action": [
                                                "ecs:DescribeContainerInstances",
                                                "ecs:DescribeTasks"
                                              ],
                                              "Effect": "Allow",
                                              "Resource": "*"
                                            },
                                            {
                                              "Action": [
                                                "ecs:ListContainerInstances",
                                                "ecs:SubmitContainerStateChange",
                                                "ecs:SubmitTaskStateChange"
                                              ],
                                              "Effect": "Allow",
                                              "Resource": {
                                                "Fn::GetAtt": [
                                                  "modeldbecscluster855068CD",
                                                  "Arn"
                                                ]
                                              }
                                            },
                                            {
                                              "Action": [
                                                "ecs:UpdateContainerInstancesState",
                                                "ecs:ListTasks"
                                              ],
                                              "Condition": {
                                                "ArnEquals": {
                                                  "ecs:cluster": {
                                                    "Fn::GetAtt": [
                                                      "modeldbecscluster855068CD",
                                                      "Arn"
                                                    ]
                                                  }
                                                }
                                              },
                                              "Effect": "Allow",
                                              "Resource": "*"
                                            }
                                          ],
                                          "Version": "2012-10-17"
                                        },
                                        "policyName": "modeldbecsclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA17A9D92",
                                        "roles": [
                                          {
                                            "Ref": "modeldbecsclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleB9FE9393"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "Resource": {
                            "id": "Resource",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                              "aws:cdk:cloudformation:props": {
                                "code": {
                                  "zipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  while has_tasks(cluster, instance_arn):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\n\ndef has_tasks(cluster, instance_arn):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']\n  print('Instance %s has %s tasks' % (instance_arn, tasks))\n\n  return tasks > 0\n\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
                                },
                                "handler": "index.lambda_handler",
                                "role": {
                                  "Fn::GetAtt": [
                                    "modeldbecsclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleB9FE9393",
                                    "Arn"
                                  ]
                                },
                                "runtime": "python3.6",
                                "environment": {
                                  "variables": {
                                    "CLUSTER": {
                                      "Ref": "modeldbecscluster855068CD"
                                    }
                                  }
                                },
                                "tags": [
                                  {
                                    "key": "Name",
                                    "value": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup"
                                  }
                                ],
                                "timeout": 310
                              }
                            }
                          },
                          "AllowInvoke:modeldbecsclusterstackmodeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicEC4AF99A": {
                            "id": "AllowInvoke:modeldbecsclusterstackmodeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicEC4AF99A",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/AllowInvoke:modeldbecsclusterstackmodeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicEC4AF99A",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                              "aws:cdk:cloudformation:props": {
                                "action": "lambda:InvokeFunction",
                                "functionName": {
                                  "Fn::GetAtt": [
                                    "modeldbecsclusterDefaultAutoScalingGroupDrainECSHookFunctionEB31DDC3",
                                    "Arn"
                                  ]
                                },
                                "principal": "sns.amazonaws.com",
                                "sourceArn": {
                                  "Ref": "modeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicB1E0F16E"
                                }
                              }
                            }
                          },
                          "Topic": {
                            "id": "Topic",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::SNS::Subscription",
                                  "aws:cdk:cloudformation:props": {
                                    "protocol": "lambda",
                                    "topicArn": {
                                      "Ref": "modeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicB1E0F16E"
                                    },
                                    "endpoint": {
                                      "Fn::GetAtt": [
                                        "modeldbecsclusterDefaultAutoScalingGroupDrainECSHookFunctionEB31DDC3",
                                        "Arn"
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "LifecycleHookDrainHook": {
                    "id": "LifecycleHookDrainHook",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook",
                    "children": {
                      "Role": {
                        "id": "Role",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "autoscaling.amazonaws.com"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "tags": [
                                  {
                                    "key": "Name",
                                    "value": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup"
                                  }
                                ]
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": "sns:Publish",
                                          "Effect": "Allow",
                                          "Resource": {
                                            "Ref": "modeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicB1E0F16E"
                                          }
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "modeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy34BC9AD6",
                                    "roles": [
                                      {
                                        "Ref": "modeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole6FFDCEA1"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "Topic": {
                        "id": "Topic",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::SNS::Topic",
                              "aws:cdk:cloudformation:props": {
                                "tags": [
                                  {
                                    "key": "Name",
                                    "value": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AutoScaling::LifecycleHook",
                          "aws:cdk:cloudformation:props": {
                            "autoScalingGroupName": {
                              "Ref": "modeldbecsclusterDefaultAutoScalingGroupASG6849224B"
                            },
                            "lifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                            "defaultResult": "CONTINUE",
                            "heartbeatTimeout": 300,
                            "notificationTargetArn": {
                              "Ref": "modeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicB1E0F16E"
                            },
                            "roleArn": {
                              "Fn::GetAtt": [
                                "modeldbecsclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole6FFDCEA1",
                                "Arn"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter": {
            "id": "SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter",
            "path": "modeldb-ecs-cluster-stack/SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter"
          },
          "SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118": {
            "id": "SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118",
            "path": "modeldb-ecs-cluster-stack/SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118"
          },
          "modeldb-awspvc": {
            "id": "modeldb-awspvc",
            "path": "modeldb-ecs-cluster-stack/modeldb-awspvc",
            "children": {
              "TaskRole": {
                "id": "TaskRole",
                "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/TaskRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/TaskRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::TaskDefinition",
                  "aws:cdk:cloudformation:props": {
                    "containerDefinitions": [
                      {
                        "cpu": 100,
                        "essential": true,
                        "image": "vertaaiofficial/modeldb-backend:latest",
                        "memory": 256,
                        "mountPoints": [
                          {
                            "containerPath": "/artifact-store/",
                            "readOnly": false,
                            "sourceVolume": "artifact-store"
                          },
                          {
                            "containerPath": "/config/",
                            "readOnly": false,
                            "sourceVolume": "config"
                          }
                        ],
                        "name": "modeldb-backend",
                        "portMappings": [
                          {
                            "containerPort": 8086,
                            "protocol": "tcp"
                          },
                          {
                            "containerPort": 8085,
                            "protocol": "tcp"
                          }
                        ],
                        "logConfiguration": {
                          "logDriver": "awslogs",
                          "options": {
                            "awslogs-group": {
                              "Ref": "modeldbawspvcmodeldbbackendLogGroup31773F15"
                            },
                            "awslogs-stream-prefix": "verta-ai-aws-ecs-service",
                            "awslogs-region": {
                              "Ref": "AWS::Region"
                            }
                          }
                        },
                        "environment": [
                          {
                            "name": "VERTA_MODELDB_CONFIG",
                            "value": "/config/config.yaml"
                          }
                        ]
                      }
                    ],
                    "executionRoleArn": {
                      "Fn::GetAtt": [
                        "modeldbawspvcExecutionRole40819C4D",
                        "Arn"
                      ]
                    },
                    "family": "modeldbecsclusterstackmodeldbawspvc71D9FE69",
                    "networkMode": "awsvpc",
                    "requiresCompatibilities": [
                      "EC2"
                    ],
                    "taskRoleArn": {
                      "Fn::GetAtt": [
                        "modeldbawspvcTaskRole2FCECB88",
                        "Arn"
                      ]
                    },
                    "volumes": [
                      {
                        "name": "artifact-store",
                        "host": {
                          "sourcePath": "/ecs/artifact-store"
                        }
                      },
                      {
                        "name": "config",
                        "host": {
                          "sourcePath": "/ecs/backend/config"
                        }
                      }
                    ]
                  }
                }
              },
              "modeldb-backend": {
                "id": "modeldb-backend",
                "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/modeldb-backend",
                "children": {
                  "LogGroup": {
                    "id": "LogGroup",
                    "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/modeldb-backend/LogGroup",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/modeldb-backend/LogGroup/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Logs::LogGroup",
                          "aws:cdk:cloudformation:props": {}
                        }
                      }
                    }
                  }
                }
              },
              "ExecutionRole": {
                "id": "ExecutionRole",
                "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/ExecutionRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/ExecutionRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/ExecutionRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-awspvc/ExecutionRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "modeldbawspvcmodeldbbackendLogGroup31773F15",
                                      "Arn"
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "modeldbawspvcExecutionRoleDefaultPolicy2BEAD7E4",
                            "roles": [
                              {
                                "Ref": "modeldbawspvcExecutionRole40819C4D"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "modeldb-backend-service": {
            "id": "modeldb-backend-service",
            "path": "modeldb-ecs-cluster-stack/modeldb-backend-service",
            "children": {
              "Service": {
                "id": "Service",
                "path": "modeldb-ecs-cluster-stack/modeldb-backend-service/Service",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::Service",
                  "aws:cdk:cloudformation:props": {
                    "cluster": {
                      "Ref": "modeldbecscluster855068CD"
                    },
                    "deploymentConfiguration": {
                      "maximumPercent": 200,
                      "minimumHealthyPercent": 50
                    },
                    "desiredCount": 1,
                    "enableEcsManagedTags": false,
                    "launchType": "EC2",
                    "networkConfiguration": {
                      "awsvpcConfiguration": {
                        "assignPublicIp": "DISABLED",
                        "subnets": [
                          {
                            "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcingressSubnet1Subnet059F22C68B714600"
                          },
                          {
                            "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcingressSubnet2SubnetF175D754472AB14E"
                          }
                        ],
                        "securityGroups": [
                          {
                            "Fn::ImportValue": "modeldb-application-sg"
                          }
                        ]
                      }
                    },
                    "schedulingStrategy": "REPLICA",
                    "serviceName": "modeldb-backend-service",
                    "serviceRegistries": [
                      {
                        "registryArn": {
                          "Fn::GetAtt": [
                            "modeldbbackendserviceCloudmapServiceC1A084F6",
                            "Arn"
                          ]
                        }
                      }
                    ],
                    "taskDefinition": {
                      "Ref": "modeldbawspvc2B97D0AF"
                    }
                  }
                }
              },
              "CloudmapService": {
                "id": "CloudmapService",
                "path": "modeldb-ecs-cluster-stack/modeldb-backend-service/CloudmapService",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-backend-service/CloudmapService/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ServiceDiscovery::Service",
                      "aws:cdk:cloudformation:props": {
                        "dnsConfig": {
                          "dnsRecords": [
                            {
                              "type": "A",
                              "ttl": 300
                            }
                          ],
                          "namespaceId": {
                            "Fn::GetAtt": [
                              "modeldbnamespace3811124B",
                              "Id"
                            ]
                          },
                          "routingPolicy": "MULTIVALUE"
                        },
                        "healthCheckCustomConfig": {
                          "failureThreshold": 1
                        },
                        "name": "backend",
                        "namespaceId": {
                          "Fn::GetAtt": [
                            "modeldbnamespace3811124B",
                            "Id"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "modeldb-proxy-task": {
            "id": "modeldb-proxy-task",
            "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task",
            "children": {
              "TaskRole": {
                "id": "TaskRole",
                "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/TaskRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/TaskRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::TaskDefinition",
                  "aws:cdk:cloudformation:props": {
                    "containerDefinitions": [
                      {
                        "cpu": 100,
                        "essential": true,
                        "image": "vertaaiofficial/modeldb-proxy:latest",
                        "memory": 256,
                        "name": "modeldb-proxy",
                        "portMappings": [
                          {
                            "containerPort": 8080,
                            "protocol": "tcp"
                          }
                        ],
                        "logConfiguration": {
                          "logDriver": "awslogs",
                          "options": {
                            "awslogs-group": {
                              "Ref": "modeldbproxytaskmodeldbproxyLogGroup2518E389"
                            },
                            "awslogs-stream-prefix": "verta-ai-aws-ecs-service",
                            "awslogs-region": {
                              "Ref": "AWS::Region"
                            }
                          }
                        },
                        "environment": [
                          {
                            "name": "MDB_ADDRESS",
                            "value": "localhost:8086"
                          },
                          {
                            "name": "SERVER_HTTP_PORT",
                            "value": "8080"
                          }
                        ]
                      }
                    ],
                    "executionRoleArn": {
                      "Fn::GetAtt": [
                        "modeldbproxytaskExecutionRoleF3909F67",
                        "Arn"
                      ]
                    },
                    "family": "modeldbecsclusterstackmodeldbproxytask55845611",
                    "networkMode": "awsvpc",
                    "requiresCompatibilities": [
                      "EC2"
                    ],
                    "taskRoleArn": {
                      "Fn::GetAtt": [
                        "modeldbproxytaskTaskRoleE6D485E7",
                        "Arn"
                      ]
                    }
                  }
                }
              },
              "modeldb-proxy": {
                "id": "modeldb-proxy",
                "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/modeldb-proxy",
                "children": {
                  "LogGroup": {
                    "id": "LogGroup",
                    "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/modeldb-proxy/LogGroup",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/modeldb-proxy/LogGroup/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Logs::LogGroup",
                          "aws:cdk:cloudformation:props": {}
                        }
                      }
                    }
                  }
                }
              },
              "ExecutionRole": {
                "id": "ExecutionRole",
                "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/ExecutionRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/ExecutionRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/ExecutionRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-proxy-task/ExecutionRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "modeldbproxytaskmodeldbproxyLogGroup2518E389",
                                      "Arn"
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "modeldbproxytaskExecutionRoleDefaultPolicy28891F63",
                            "roles": [
                              {
                                "Ref": "modeldbproxytaskExecutionRoleF3909F67"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "modeldb-proxy-service": {
            "id": "modeldb-proxy-service",
            "path": "modeldb-ecs-cluster-stack/modeldb-proxy-service",
            "children": {
              "Service": {
                "id": "Service",
                "path": "modeldb-ecs-cluster-stack/modeldb-proxy-service/Service",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::Service",
                  "aws:cdk:cloudformation:props": {
                    "cluster": {
                      "Ref": "modeldbecscluster855068CD"
                    },
                    "deploymentConfiguration": {
                      "maximumPercent": 200,
                      "minimumHealthyPercent": 50
                    },
                    "desiredCount": 1,
                    "enableEcsManagedTags": false,
                    "launchType": "EC2",
                    "networkConfiguration": {
                      "awsvpcConfiguration": {
                        "assignPublicIp": "DISABLED",
                        "subnets": [
                          {
                            "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcingressSubnet1Subnet059F22C68B714600"
                          },
                          {
                            "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcingressSubnet2SubnetF175D754472AB14E"
                          }
                        ],
                        "securityGroups": [
                          {
                            "Fn::ImportValue": "modeldb-application-sg"
                          }
                        ]
                      }
                    },
                    "schedulingStrategy": "REPLICA",
                    "serviceName": "modeldb-proxy-service",
                    "serviceRegistries": [
                      {
                        "registryArn": {
                          "Fn::GetAtt": [
                            "modeldbproxyserviceCloudmapServiceCFCFB1A0",
                            "Arn"
                          ]
                        }
                      }
                    ],
                    "taskDefinition": {
                      "Ref": "modeldbproxytaskC3F08DC6"
                    }
                  }
                }
              },
              "CloudmapService": {
                "id": "CloudmapService",
                "path": "modeldb-ecs-cluster-stack/modeldb-proxy-service/CloudmapService",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-proxy-service/CloudmapService/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ServiceDiscovery::Service",
                      "aws:cdk:cloudformation:props": {
                        "dnsConfig": {
                          "dnsRecords": [
                            {
                              "type": "A",
                              "ttl": 300
                            }
                          ],
                          "namespaceId": {
                            "Fn::GetAtt": [
                              "modeldbnamespace3811124B",
                              "Id"
                            ]
                          },
                          "routingPolicy": "MULTIVALUE"
                        },
                        "healthCheckCustomConfig": {
                          "failureThreshold": 1
                        },
                        "name": "proxy",
                        "namespaceId": {
                          "Fn::GetAtt": [
                            "modeldbnamespace3811124B",
                            "Id"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "modeldb-frontend-task": {
            "id": "modeldb-frontend-task",
            "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task",
            "children": {
              "TaskRole": {
                "id": "TaskRole",
                "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/TaskRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/TaskRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::TaskDefinition",
                  "aws:cdk:cloudformation:props": {
                    "containerDefinitions": [
                      {
                        "cpu": 100,
                        "essential": true,
                        "image": "vertaaiofficial/modeldb-frontend:latest",
                        "memory": 256,
                        "name": "modeldb-frontend",
                        "portMappings": [
                          {
                            "containerPort": 3000,
                            "protocol": "tcp"
                          }
                        ],
                        "logConfiguration": {
                          "logDriver": "awslogs",
                          "options": {
                            "awslogs-group": {
                              "Ref": "modeldbfrontendtaskmodeldbfrontendLogGroup7B961892"
                            },
                            "awslogs-stream-prefix": "verta-ai-aws-ecs-service",
                            "awslogs-region": {
                              "Ref": "AWS::Region"
                            }
                          }
                        },
                        "environment": [
                          {
                            "name": "DEPLOYED",
                            "value": "yes"
                          },
                          {
                            "name": "BACKEND_API_PROTOCOL",
                            "value": "http"
                          },
                          {
                            "name": "BACKEND_API_DOMAIN",
                            "value": "localhost:8080"
                          },
                          {
                            "name": "MDB_ADDRESS",
                            "value": "http://localhost:8080"
                          },
                          {
                            "name": "ARTIFACTORY_ADDRESS",
                            "value": "http://localhost:8086"
                          }
                        ]
                      }
                    ],
                    "executionRoleArn": {
                      "Fn::GetAtt": [
                        "modeldbfrontendtaskExecutionRole60079106",
                        "Arn"
                      ]
                    },
                    "family": "modeldbecsclusterstackmodeldbfrontendtask93EE738C",
                    "networkMode": "awsvpc",
                    "requiresCompatibilities": [
                      "EC2"
                    ],
                    "taskRoleArn": {
                      "Fn::GetAtt": [
                        "modeldbfrontendtaskTaskRole18F8ECD3",
                        "Arn"
                      ]
                    }
                  }
                }
              },
              "modeldb-frontend": {
                "id": "modeldb-frontend",
                "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/modeldb-frontend",
                "children": {
                  "LogGroup": {
                    "id": "LogGroup",
                    "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/modeldb-frontend/LogGroup",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/modeldb-frontend/LogGroup/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Logs::LogGroup",
                          "aws:cdk:cloudformation:props": {}
                        }
                      }
                    }
                  }
                }
              },
              "ExecutionRole": {
                "id": "ExecutionRole",
                "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/ExecutionRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/ExecutionRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/ExecutionRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-frontend-task/ExecutionRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "modeldbfrontendtaskmodeldbfrontendLogGroup7B961892",
                                      "Arn"
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "modeldbfrontendtaskExecutionRoleDefaultPolicy4E137FED",
                            "roles": [
                              {
                                "Ref": "modeldbfrontendtaskExecutionRole60079106"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "modeldb-ecs-service": {
            "id": "modeldb-ecs-service",
            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service",
            "children": {
              "LB": {
                "id": "LB",
                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
                      "aws:cdk:cloudformation:props": {
                        "scheme": "internet-facing",
                        "securityGroups": [
                          {
                            "Fn::GetAtt": [
                              "modeldbecsserviceLBSecurityGroup4AB093DA",
                              "GroupId"
                            ]
                          }
                        ],
                        "subnets": [
                          {
                            "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcingressSubnet1Subnet059F22C68B714600"
                          },
                          {
                            "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcingressSubnet2SubnetF175D754472AB14E"
                          }
                        ],
                        "type": "application"
                      }
                    }
                  },
                  "SecurityGroup": {
                    "id": "SecurityGroup",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB/SecurityGroup",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB/SecurityGroup/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                          "aws:cdk:cloudformation:props": {
                            "groupDescription": "Automatically created Security Group for ELB modeldbecsclusterstackmodeldbecsserviceLB3D1EB752",
                            "securityGroupIngress": [
                              {
                                "cidrIp": "0.0.0.0/0",
                                "ipProtocol": "tcp",
                                "fromPort": 80,
                                "toPort": 80,
                                "description": "Allow from anyone on port 80"
                              }
                            ],
                            "vpcId": {
                              "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpc8378EB38272D6E3A"
                            }
                          }
                        }
                      },
                      "to modeldbecsclusterstackmodeldbecsserviceServiceSecurityGroup9A179184:3000": {
                        "id": "to modeldbecsclusterstackmodeldbecsserviceServiceSecurityGroup9A179184:3000",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB/SecurityGroup/to modeldbecsclusterstackmodeldbecsserviceServiceSecurityGroup9A179184:3000",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupEgress",
                          "aws:cdk:cloudformation:props": {
                            "groupId": {
                              "Fn::GetAtt": [
                                "modeldbecsserviceLBSecurityGroup4AB093DA",
                                "GroupId"
                              ]
                            },
                            "ipProtocol": "tcp",
                            "description": "Load balancer to target",
                            "destinationSecurityGroupId": {
                              "Fn::GetAtt": [
                                "modeldbecsserviceServiceSecurityGroup433449ED",
                                "GroupId"
                              ]
                            },
                            "fromPort": 3000,
                            "toPort": 3000
                          }
                        }
                      }
                    }
                  },
                  "PublicListener": {
                    "id": "PublicListener",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB/PublicListener",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB/PublicListener/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::ElasticLoadBalancingV2::Listener",
                          "aws:cdk:cloudformation:props": {
                            "defaultActions": [
                              {
                                "targetGroupArn": {
                                  "Ref": "modeldbecsserviceLBPublicListenerECSGroup0CDFD2A5"
                                },
                                "type": "forward"
                              }
                            ],
                            "loadBalancerArn": {
                              "Ref": "modeldbecsserviceLB23861F49"
                            },
                            "port": 80,
                            "protocol": "HTTP"
                          }
                        }
                      },
                      "ECSGroup": {
                        "id": "ECSGroup",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB/PublicListener/ECSGroup",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LB/PublicListener/ECSGroup/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                              "aws:cdk:cloudformation:props": {
                                "port": 80,
                                "protocol": "HTTP",
                                "targetType": "ip",
                                "vpcId": {
                                  "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpc8378EB38272D6E3A"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "LoadBalancerDNS": {
                "id": "LoadBalancerDNS",
                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/LoadBalancerDNS"
              },
              "ServiceURL": {
                "id": "ServiceURL",
                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/ServiceURL"
              },
              "Service": {
                "id": "Service",
                "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/Service",
                "children": {
                  "Service": {
                    "id": "Service",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/Service/Service",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ECS::Service",
                      "aws:cdk:cloudformation:props": {
                        "cluster": {
                          "Ref": "modeldbecscluster855068CD"
                        },
                        "deploymentConfiguration": {
                          "maximumPercent": 200,
                          "minimumHealthyPercent": 50
                        },
                        "desiredCount": 1,
                        "enableEcsManagedTags": false,
                        "healthCheckGracePeriodSeconds": 60,
                        "launchType": "EC2",
                        "loadBalancers": [
                          {
                            "targetGroupArn": {
                              "Ref": "modeldbecsserviceLBPublicListenerECSGroup0CDFD2A5"
                            },
                            "containerName": "modeldb-frontend",
                            "containerPort": 3000
                          }
                        ],
                        "networkConfiguration": {
                          "awsvpcConfiguration": {
                            "assignPublicIp": "DISABLED",
                            "subnets": [
                              {
                                "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcapplicationSubnet1Subnet8B68205B1F66BB2C"
                              },
                              {
                                "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpcapplicationSubnet2Subnet296709622ABA6FC7"
                              }
                            ],
                            "securityGroups": [
                              {
                                "Fn::GetAtt": [
                                  "modeldbecsserviceServiceSecurityGroup433449ED",
                                  "GroupId"
                                ]
                              }
                            ]
                          }
                        },
                        "schedulingStrategy": "REPLICA",
                        "serviceName": "modeldb-frontend-service",
                        "taskDefinition": {
                          "Ref": "modeldbfrontendtask73748101"
                        }
                      }
                    }
                  },
                  "SecurityGroup": {
                    "id": "SecurityGroup",
                    "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/Service/SecurityGroup",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/Service/SecurityGroup/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                          "aws:cdk:cloudformation:props": {
                            "groupDescription": "modeldb-ecs-cluster-stack/modeldb-ecs-service/Service/SecurityGroup",
                            "securityGroupEgress": [
                              {
                                "cidrIp": "0.0.0.0/0",
                                "description": "Allow all outbound traffic by default",
                                "ipProtocol": "-1"
                              }
                            ],
                            "vpcId": {
                              "Fn::ImportValue": "ml-base-infra-stack:ExportsOutputRefVpc8378EB38272D6E3A"
                            }
                          }
                        }
                      },
                      "from modeldbecsclusterstackmodeldbecsserviceLBSecurityGroup928CF400:3000": {
                        "id": "from modeldbecsclusterstackmodeldbecsserviceLBSecurityGroup928CF400:3000",
                        "path": "modeldb-ecs-cluster-stack/modeldb-ecs-service/Service/SecurityGroup/from modeldbecsclusterstackmodeldbecsserviceLBSecurityGroup928CF400:3000",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                          "aws:cdk:cloudformation:props": {
                            "ipProtocol": "tcp",
                            "description": "Load balancer to target",
                            "fromPort": 3000,
                            "groupId": {
                              "Fn::GetAtt": [
                                "modeldbecsserviceServiceSecurityGroup433449ED",
                                "GroupId"
                              ]
                            },
                            "sourceSecurityGroupId": {
                              "Fn::GetAtt": [
                                "modeldbecsserviceLBSecurityGroup4AB093DA",
                                "GroupId"
                              ]
                            },
                            "toPort": 3000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}