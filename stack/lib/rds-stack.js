"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const aws_rds_1 = require("@aws-cdk/aws-rds");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
class RDSStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const rdsSecurityGroup = new aws_ec2_1.SecurityGroup(this, 'rdsSecurityGroup', {
            vpc: props.vpc, allowAllOutbound: false,
        });
        rdsSecurityGroup.addIngressRule(aws_ec2_1.Peer.anyIpv4(), aws_ec2_1.Port.tcp(props.port));
        this.postgresRDSInstance = new aws_rds_1.DatabaseInstance(this, 'ModelDBRDSInstance', {
            engine: aws_rds_1.DatabaseInstanceEngine.POSTGRES,
            instanceClass: aws_ec2_1.InstanceType.of(aws_ec2_1.InstanceClass.T2, aws_ec2_1.InstanceSize.SMALL),
            vpc: props.vpc,
            vpcPlacement: { subnetType: aws_ec2_1.SubnetType.ISOLATED },
            storageEncrypted: true,
            multiAz: false,
            autoMinorVersionUpgrade: false,
            allocatedStorage: 25,
            storageType: aws_rds_1.StorageType.GP2,
            backupRetention: core_1.Duration.days(1),
            deletionProtection: false,
            masterUsername: props.username,
            databaseName: props.databaseName,
            securityGroups: [rdsSecurityGroup],
            // masterUserPassword: this.secret.secretValue,
            // generateMasterUserPassword: true,
            port: props.port
        });
        const dbUrl = `jdbc:postgresql://${this.postgresRDSInstance.dbInstanceEndpointAddress}:${this.postgresRDSInstance.dbInstanceEndpointPort}`;
        new core_1.CfnOutput(this, 'modeldb-rds-url', {
            exportName: 'modeldb-rds-url',
            value: dbUrl,
            description: 'ModelDB RDS Postgres Database Url'
        });
    }
}
exports.RDSStack = RDSStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmRzLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQTZFO0FBQzdFLDhDQUF5RjtBQUN6Riw4Q0FBeUg7QUFVekgsTUFBYSxRQUFTLFNBQVEsWUFBSztJQUkvQixZQUFZLEtBQVUsRUFBRSxFQUFVLEVBQUUsS0FBb0I7UUFDcEQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLHVCQUFhLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ2pFLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEtBQUs7U0FDMUMsQ0FBQyxDQUFDO1FBRUgsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLGNBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxjQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBRXJFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLDBCQUFnQixDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUN4RSxNQUFNLEVBQUUsZ0NBQXNCLENBQUMsUUFBUTtZQUN2QyxhQUFhLEVBQUUsc0JBQVksQ0FBQyxFQUFFLENBQUMsdUJBQWEsQ0FBQyxFQUFFLEVBQUUsc0JBQVksQ0FBQyxLQUFLLENBQUM7WUFDcEUsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsWUFBWSxFQUFFLEVBQUUsVUFBVSxFQUFFLG9CQUFVLENBQUMsUUFBUSxFQUFFO1lBQ2pELGdCQUFnQixFQUFFLElBQUk7WUFDdEIsT0FBTyxFQUFFLEtBQUs7WUFDZCx1QkFBdUIsRUFBRSxLQUFLO1lBQzlCLGdCQUFnQixFQUFFLEVBQUU7WUFDcEIsV0FBVyxFQUFFLHFCQUFXLENBQUMsR0FBRztZQUM1QixlQUFlLEVBQUUsZUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakMsa0JBQWtCLEVBQUUsS0FBSztZQUN6QixjQUFjLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDOUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGNBQWMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO1lBQ2xDLCtDQUErQztZQUMvQyxvQ0FBb0M7WUFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLENBQUMsQ0FBQztRQUlILE1BQU0sS0FBSyxHQUFHLHFCQUFxQixJQUFJLENBQUMsbUJBQW1CLENBQUMseUJBQXlCLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDM0ksSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUNuQyxVQUFVLEVBQUUsaUJBQWlCO1lBQzdCLEtBQUssRUFBRSxLQUFLO1lBQ1osV0FBVyxFQUFFLG1DQUFtQztTQUNuRCxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUExQ0QsNEJBMENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBEdXJhdGlvbiwgU3RhY2ssIFN0YWNrUHJvcHMsIENmbk91dHB1dCwgfSBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0IHsgRGF0YWJhc2VJbnN0YW5jZSwgRGF0YWJhc2VJbnN0YW5jZUVuZ2luZSwgU3RvcmFnZVR5cGUgfSBmcm9tICdAYXdzLWNkay9hd3MtcmRzJztcbmltcG9ydCB7IEluc3RhbmNlQ2xhc3MsIEluc3RhbmNlU2l6ZSwgSW5zdGFuY2VUeXBlLCBTdWJuZXRUeXBlLCBWcGMsIFNlY3VyaXR5R3JvdXAsIFBlZXIsIFBvcnQgfSBmcm9tIFwiQGF3cy1jZGsvYXdzLWVjMlwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJEU1N0YWNrUHJvcHMgZXh0ZW5kcyBTdGFja1Byb3BzIHtcbiAgICB2cGM6IFZwYyxcbiAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIGRhdGFiYXNlTmFtZTogc3RyaW5nO1xuICAgIHBvcnQ6IG51bWJlcjtcbn1cblxuXG5leHBvcnQgY2xhc3MgUkRTU3RhY2sgZXh0ZW5kcyBTdGFjayB7XG5cbiAgICByZWFkb25seSBwb3N0Z3Jlc1JEU0luc3RhbmNlOiBEYXRhYmFzZUluc3RhbmNlO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IEFwcCwgaWQ6IHN0cmluZywgcHJvcHM6IFJEU1N0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgcmRzU2VjdXJpdHlHcm91cCA9IG5ldyBTZWN1cml0eUdyb3VwKHRoaXMsICdyZHNTZWN1cml0eUdyb3VwJywge1xuICAgICAgICAgICAgdnBjOiBwcm9wcy52cGMsIGFsbG93QWxsT3V0Ym91bmQ6IGZhbHNlLFxuICAgICAgICB9KTtcblxuICAgICAgICByZHNTZWN1cml0eUdyb3VwLmFkZEluZ3Jlc3NSdWxlKFBlZXIuYW55SXB2NCgpLCBQb3J0LnRjcChwcm9wcy5wb3J0KSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMucG9zdGdyZXNSRFNJbnN0YW5jZSA9IG5ldyBEYXRhYmFzZUluc3RhbmNlKHRoaXMsICdNb2RlbERCUkRTSW5zdGFuY2UnLCB7XG4gICAgICAgICAgICBlbmdpbmU6IERhdGFiYXNlSW5zdGFuY2VFbmdpbmUuUE9TVEdSRVMsXG4gICAgICAgICAgICBpbnN0YW5jZUNsYXNzOiBJbnN0YW5jZVR5cGUub2YoSW5zdGFuY2VDbGFzcy5UMiwgSW5zdGFuY2VTaXplLlNNQUxMKSxcbiAgICAgICAgICAgIHZwYzogcHJvcHMudnBjLFxuICAgICAgICAgICAgdnBjUGxhY2VtZW50OiB7IHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuSVNPTEFURUQgfSxcbiAgICAgICAgICAgIHN0b3JhZ2VFbmNyeXB0ZWQ6IHRydWUsXG4gICAgICAgICAgICBtdWx0aUF6OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9NaW5vclZlcnNpb25VcGdyYWRlOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG9jYXRlZFN0b3JhZ2U6IDI1LFxuICAgICAgICAgICAgc3RvcmFnZVR5cGU6IFN0b3JhZ2VUeXBlLkdQMixcbiAgICAgICAgICAgIGJhY2t1cFJldGVudGlvbjogRHVyYXRpb24uZGF5cygxKSxcbiAgICAgICAgICAgIGRlbGV0aW9uUHJvdGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICBtYXN0ZXJVc2VybmFtZTogcHJvcHMudXNlcm5hbWUsXG4gICAgICAgICAgICBkYXRhYmFzZU5hbWU6IHByb3BzLmRhdGFiYXNlTmFtZSxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBzOiBbcmRzU2VjdXJpdHlHcm91cF0sXG4gICAgICAgICAgICAvLyBtYXN0ZXJVc2VyUGFzc3dvcmQ6IHRoaXMuc2VjcmV0LnNlY3JldFZhbHVlLFxuICAgICAgICAgICAgLy8gZ2VuZXJhdGVNYXN0ZXJVc2VyUGFzc3dvcmQ6IHRydWUsXG4gICAgICAgICAgICBwb3J0OiBwcm9wcy5wb3J0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3QgZGJVcmwgPSBgamRiYzpwb3N0Z3Jlc3FsOi8vJHt0aGlzLnBvc3RncmVzUkRTSW5zdGFuY2UuZGJJbnN0YW5jZUVuZHBvaW50QWRkcmVzc306JHt0aGlzLnBvc3RncmVzUkRTSW5zdGFuY2UuZGJJbnN0YW5jZUVuZHBvaW50UG9ydH1gO1xuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsICdtb2RlbGRiLXJkcy11cmwnLCB7XG4gICAgICAgICAgICBleHBvcnROYW1lOiAnbW9kZWxkYi1yZHMtdXJsJyxcbiAgICAgICAgICAgIHZhbHVlOiBkYlVybCwgXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ01vZGVsREIgUkRTIFBvc3RncmVzIERhdGFiYXNlIFVybCdcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19