"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const aws_rds_1 = require("@aws-cdk/aws-rds");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
class RDSStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const rdsSGId = core_1.Fn.importValue('modeldb-rds-sg');
        const applicationSGId = core_1.Fn.importValue('modeldb-application-sg');
        const rdsSecurityGroup = aws_ec2_1.SecurityGroup.fromSecurityGroupId(this, 'ec2-SecurityGroup', rdsSGId);
        new aws_ec2_1.CfnSecurityGroupIngress(this, 'RDSIngressRule', {
            ipProtocol: 'tcp',
            fromPort: props.port,
            toPort: props.port,
            sourceSecurityGroupId: applicationSGId,
            groupId: rdsSGId
        });
        this.postgresRDSInstance = new aws_rds_1.DatabaseInstance(this, 'ModelDBRDSInstance', {
            engine: aws_rds_1.DatabaseInstanceEngine.POSTGRES,
            instanceClass: aws_ec2_1.InstanceType.of(aws_ec2_1.InstanceClass.T2, aws_ec2_1.InstanceSize.SMALL),
            vpc: props.vpc,
            vpcPlacement: { subnetType: aws_ec2_1.SubnetType.ISOLATED },
            storageEncrypted: true,
            multiAz: false,
            autoMinorVersionUpgrade: false,
            allocatedStorage: 25,
            storageType: aws_rds_1.StorageType.GP2,
            backupRetention: core_1.Duration.days(1),
            deletionProtection: false,
            masterUsername: props.username,
            databaseName: props.databaseName,
            securityGroups: [rdsSecurityGroup],
            // masterUserPassword: this.secret.secretValue,
            // generateMasterUserPassword: true,
            port: props.port
        });
        const dbUrl = `jdbc:postgresql://${this.postgresRDSInstance.dbInstanceEndpointAddress}:${this.postgresRDSInstance.dbInstanceEndpointPort}`;
        new core_1.CfnOutput(this, 'modeldb-rds-url', {
            exportName: 'modeldb-rds-url',
            value: dbUrl,
            description: 'ModelDB RDS Postgres Database Url'
        });
    }
}
exports.RDSStack = RDSStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmRzLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQWlGO0FBQ2pGLDhDQUEwRjtBQUMxRiw4Q0FBdUk7QUFVdkksTUFBYSxRQUFTLFNBQVEsWUFBSztJQUkvQixZQUFZLEtBQVUsRUFBRSxFQUFVLEVBQUUsS0FBb0I7UUFDcEQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxPQUFPLEdBQUcsU0FBRSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sZUFBZSxHQUFHLFNBQUUsQ0FBQyxXQUFXLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNqRSxNQUFNLGdCQUFnQixHQUFHLHVCQUFhLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9GLElBQUksaUNBQXVCLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFO1lBQ2hELFVBQVUsRUFBRSxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNwQixNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDbEIscUJBQXFCLEVBQUUsZUFBZTtZQUN0QyxPQUFPLEVBQUUsT0FBTztTQUNuQixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSwwQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUU7WUFDeEUsTUFBTSxFQUFFLGdDQUFzQixDQUFDLFFBQVE7WUFDdkMsYUFBYSxFQUFFLHNCQUFZLENBQUMsRUFBRSxDQUFDLHVCQUFhLENBQUMsRUFBRSxFQUFFLHNCQUFZLENBQUMsS0FBSyxDQUFDO1lBQ3BFLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLFlBQVksRUFBRSxFQUFFLFVBQVUsRUFBRSxvQkFBVSxDQUFDLFFBQVEsRUFBRTtZQUNqRCxnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsdUJBQXVCLEVBQUUsS0FBSztZQUM5QixnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BCLFdBQVcsRUFBRSxxQkFBVyxDQUFDLEdBQUc7WUFDNUIsZUFBZSxFQUFFLGVBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLGtCQUFrQixFQUFFLEtBQUs7WUFDekIsY0FBYyxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQzlCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxjQUFjLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztZQUNsQywrQ0FBK0M7WUFDL0Msb0NBQW9DO1lBQ3BDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNuQixDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxxQkFBcUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQzNJLElBQUksZ0JBQVMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7WUFDbkMsVUFBVSxFQUFFLGlCQUFpQjtZQUM3QixLQUFLLEVBQUUsS0FBSztZQUNaLFdBQVcsRUFBRSxtQ0FBbUM7U0FDbkQsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBNUNELDRCQTRDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgRHVyYXRpb24sIFN0YWNrLCBTdGFja1Byb3BzLCBDZm5PdXRwdXQsIEZuLCB9IGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5pbXBvcnQgeyBEYXRhYmFzZUluc3RhbmNlLCBEYXRhYmFzZUluc3RhbmNlRW5naW5lLCBTdG9yYWdlVHlwZSwgfSBmcm9tICdAYXdzLWNkay9hd3MtcmRzJztcbmltcG9ydCB7IEluc3RhbmNlQ2xhc3MsIEluc3RhbmNlU2l6ZSwgSW5zdGFuY2VUeXBlLCBTdWJuZXRUeXBlLCBWcGMsIFNlY3VyaXR5R3JvdXAsIENmblNlY3VyaXR5R3JvdXBJbmdyZXNzLCB9IGZyb20gXCJAYXdzLWNkay9hd3MtZWMyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUkRTU3RhY2tQcm9wcyBleHRlbmRzIFN0YWNrUHJvcHMge1xuICAgIHZwYzogVnBjLFxuICAgIHVzZXJuYW1lOiBzdHJpbmc7XG4gICAgZGF0YWJhc2VOYW1lOiBzdHJpbmc7XG4gICAgcG9ydDogbnVtYmVyO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBSRFNTdGFjayBleHRlbmRzIFN0YWNrIHtcblxuICAgIHJlYWRvbmx5IHBvc3RncmVzUkRTSW5zdGFuY2U6IERhdGFiYXNlSW5zdGFuY2U7XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQXBwLCBpZDogc3RyaW5nLCBwcm9wczogUkRTU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgICAgICBjb25zdCByZHNTR0lkID0gRm4uaW1wb3J0VmFsdWUoJ21vZGVsZGItcmRzLXNnJyk7XG4gICAgICAgIGNvbnN0IGFwcGxpY2F0aW9uU0dJZCA9IEZuLmltcG9ydFZhbHVlKCdtb2RlbGRiLWFwcGxpY2F0aW9uLXNnJyk7XG4gICAgICAgIGNvbnN0IHJkc1NlY3VyaXR5R3JvdXAgPSBTZWN1cml0eUdyb3VwLmZyb21TZWN1cml0eUdyb3VwSWQodGhpcywgJ2VjMi1TZWN1cml0eUdyb3VwJywgcmRzU0dJZCk7XG4gICAgICAgIG5ldyBDZm5TZWN1cml0eUdyb3VwSW5ncmVzcyh0aGlzLCAnUkRTSW5ncmVzc1J1bGUnLCB7XG4gICAgICAgICAgICBpcFByb3RvY29sOiAndGNwJyxcbiAgICAgICAgICAgIGZyb21Qb3J0OiBwcm9wcy5wb3J0LFxuICAgICAgICAgICAgdG9Qb3J0OiBwcm9wcy5wb3J0LFxuICAgICAgICAgICAgc291cmNlU2VjdXJpdHlHcm91cElkOiBhcHBsaWNhdGlvblNHSWQsXG4gICAgICAgICAgICBncm91cElkOiByZHNTR0lkXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMucG9zdGdyZXNSRFNJbnN0YW5jZSA9IG5ldyBEYXRhYmFzZUluc3RhbmNlKHRoaXMsICdNb2RlbERCUkRTSW5zdGFuY2UnLCB7XG4gICAgICAgICAgICBlbmdpbmU6IERhdGFiYXNlSW5zdGFuY2VFbmdpbmUuUE9TVEdSRVMsXG4gICAgICAgICAgICBpbnN0YW5jZUNsYXNzOiBJbnN0YW5jZVR5cGUub2YoSW5zdGFuY2VDbGFzcy5UMiwgSW5zdGFuY2VTaXplLlNNQUxMKSxcbiAgICAgICAgICAgIHZwYzogcHJvcHMudnBjLFxuICAgICAgICAgICAgdnBjUGxhY2VtZW50OiB7IHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuSVNPTEFURUQgfSxcbiAgICAgICAgICAgIHN0b3JhZ2VFbmNyeXB0ZWQ6IHRydWUsXG4gICAgICAgICAgICBtdWx0aUF6OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9NaW5vclZlcnNpb25VcGdyYWRlOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG9jYXRlZFN0b3JhZ2U6IDI1LFxuICAgICAgICAgICAgc3RvcmFnZVR5cGU6IFN0b3JhZ2VUeXBlLkdQMixcbiAgICAgICAgICAgIGJhY2t1cFJldGVudGlvbjogRHVyYXRpb24uZGF5cygxKSxcbiAgICAgICAgICAgIGRlbGV0aW9uUHJvdGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICBtYXN0ZXJVc2VybmFtZTogcHJvcHMudXNlcm5hbWUsXG4gICAgICAgICAgICBkYXRhYmFzZU5hbWU6IHByb3BzLmRhdGFiYXNlTmFtZSxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBzOiBbcmRzU2VjdXJpdHlHcm91cF0sXG4gICAgICAgICAgICAvLyBtYXN0ZXJVc2VyUGFzc3dvcmQ6IHRoaXMuc2VjcmV0LnNlY3JldFZhbHVlLFxuICAgICAgICAgICAgLy8gZ2VuZXJhdGVNYXN0ZXJVc2VyUGFzc3dvcmQ6IHRydWUsXG4gICAgICAgICAgICBwb3J0OiBwcm9wcy5wb3J0XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZGJVcmwgPSBgamRiYzpwb3N0Z3Jlc3FsOi8vJHt0aGlzLnBvc3RncmVzUkRTSW5zdGFuY2UuZGJJbnN0YW5jZUVuZHBvaW50QWRkcmVzc306JHt0aGlzLnBvc3RncmVzUkRTSW5zdGFuY2UuZGJJbnN0YW5jZUVuZHBvaW50UG9ydH1gO1xuICAgICAgICBuZXcgQ2ZuT3V0cHV0KHRoaXMsICdtb2RlbGRiLXJkcy11cmwnLCB7XG4gICAgICAgICAgICBleHBvcnROYW1lOiAnbW9kZWxkYi1yZHMtdXJsJyxcbiAgICAgICAgICAgIHZhbHVlOiBkYlVybCwgXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ01vZGVsREIgUkRTIFBvc3RncmVzIERhdGFiYXNlIFVybCdcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19